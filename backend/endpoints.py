from test_code_complete import generate_code, generate_analysis
from parse_code import parse_code_to_matrix
from flask import request, jsonify
from config import app, db
from model import CodeFiles
import requests
from constants import BACKEND_URL, BUCKET_NAME
from text_to_speech import text_to_wav
from upload_gs_bucket import async_upload_wav_blob
from test_script import test_script
import asyncio

# FOR BACKEND: Get user code returns the code last generated by the user
@app.route("/get-code/<int:user_id>", methods = ["GET"])
def get_user_code(user_id):
  code_string = CodeFiles.query.get(user_id)
  if not code_string:
      return jsonify({'message': 'CodeFile not found'}), 404
  return code_string.to_json()

# FOR BACKEND: Sets user code returns the code last generated by the user
# This does not contain the parsed code, only raw string code data
@app.route("/set-code/<int:user_id>", methods = ["PATCH"])
def set_user_code(user_id):
  code_string = CodeFiles.query.get(user_id)
  data = request.json
  print(data)
  if code_string: 
    prev_code = code_string.file_content
    code_string.file_content = data.get("file_content", prev_code)
  else: 
    db.session.add(CodeFiles(file_id=user_id, file_content=data.get("file_content", "")))
  db.session.commit()
  return jsonify({"message": "set successful"})


# FOR FRONTEND: 
@app.route("/get-parsed-code/<int:user_id>", methods = ["GET"])
def get_parsed_code(user_id): 
  code_string = CodeFiles.query.get(user_id)
  if not code_string:
    return jsonify({'message': 'CodeFile not found'}), 404
  return jsonify({"parsed_code": parse_code_to_matrix(code_string.file_content, 2)})


@app.route("/post-prompt/<int:user_id>", methods = ["PATCH"])
def post_prompt(user_id):
  profile=CodeFiles.query.get(user_id)
  data = request.json
  if (profile):
    profile.file_prompt = data.get("prompt", profile.file_prompt)
  else:
    db.session.add(CodeFiles(file_id=user_id, file_content=data.get("file_content", ""), 
                              file_prompt=data.get("prompt", "")))
  prev_code = profile.file_content
  db.session.commit()
  generated_code_str = generate_code(data.get("prompt", profile.file_prompt if profile.file_prompt else ""), prev_code)
  requests.patch(BACKEND_URL + f"/set-code/{user_id}",\
                 json={"file_content": generated_code_str})
  analysis = generate_analysis(generated_code_str, prev_code)
  audio_bytes = text_to_wav("en-US-Wavenet-A", analysis.replace("`", ""))
  asyncio.run(async_upload_wav_blob(BUCKET_NAME, audio_bytes, f"audio_{user_id}.wav"))
  return jsonify({"message": "updated prompt", "code": generated_code_str, 
                  "audio_name": f"audio_{user_id}.wav"})
    # return jsonify({"message": "profile not found"})

@app.route("/compile-test/<int:user_id>", methods = ["GET"])
def test_output(user_id):
  code_string = CodeFiles.query.get(user_id)
  return jsonify(test_script(code_string.file_contents))


if (__name__ == "__main__"):
  with app.app_context():
    db.create_all()
  app.run(debug=True)